from .base_room import BaseRoom
from collections import defaultdict, deque


class MalwareLabRoom(BaseRoom):
    def __init__(self, start_pid=132):
        super().__init__(

        )

    def _is_exfil(self, cmd: str) -> bool:
        pass

    def _parse_jsonl(self, path):
        pass

    def _build_graph(self, recordes):
        children = defaultdict(list)
        pid_cmd = {}

        for record in recordes:
            pid = record["pid"]
            ppid = record["ppid"]
            cmd = record["cmd"]

            if pid not in children:
                children[pid] = []
            if ppid != 0:
                children[ppid].append(pid)
            
            pid_cmd[pid] = cmd
            
        return children, pid_cmd

    def _dfs_find_path(self, start_pid, children, pid_cmd, path=None, visited=None):
        if path is None:
            path = [start_pid]
        if visited is None:
            visited = set()
        
        visited.add(start_pid)

        if self._is_exfil(pid_cmd[start_pid]):
            return path

        for child in children[start_pid]:
            path.append(child)
            result = self._dfs_find_path(child, pid_cmd, path, visited)
            if result is not None:
                return result
            path.pop()

    def _bfs_find_path(self, start_pid, children, pid_cmd):
        pass

    def inspect(self, item, player, logger):
        if item != "proc_tree.jsonl":
            return f"No such item: {item}"
        
        records = self._parse_jsonl("./data/proc_tree.jsonl")
        children, pid_cmd = self._build_graph(records)

        path = self._dfs_find_path(132, children, pid_cmd)
        if path is None:
            path = self._bfs_find_path(132, children, pid_cmd)

        if path is None:
            return "No exfil path found from start PID."
        
        terminal_pid = path[-1]

        logger.log(f"Terminal PID: {terminal_pid}")
        logger.log(f"Path: {" -> ".join(path)}")
        logger.log(f"Commands: {pid_cmd[terminal_pid]}")

        player.add_token("terminal PID", terminal_pid)

        return f"Token extracted: {terminal_pid}"
        
